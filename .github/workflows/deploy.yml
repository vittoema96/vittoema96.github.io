name: Build and Deploy to GitHub Pages

on:
  push:
    branches:
      - main

# Grant the GITHUB_TOKEN permissions to deploy to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout repo on virtual machine
      - name: Checkout Repo üõéÔ∏è
        uses: actions/checkout@v4

      # 2. Read the current version from manifest
      - name: Read version from manifest.json üè∑Ô∏è
        id: read_version
        run: echo "version=$(node -p "require('./manifest.json').version")" >> $GITHUB_OUTPUT

      # 3. Update the PROJECT_VERSION on index.html and sw.js
      - name: Update Version on Files üìù
        run: |
          FULL_VERSION="${{ steps.read_version.outputs.version }}+${{ github.run_number }}"
          echo "Setting version to: $FULL_VERSION"
          sed -i "s/const PROJECT_VERSION = .*/const PROJECT_VERSION = '$FULL_VERSION';/" ./index.html
          sed -i "s/const PROJECT_VERSION = .*/const PROJECT_VERSION = '$FULL_VERSION';/" ./js/sw.js

      # 4. ???
      - name: Setup Pages
        uses: actions/configure-pages@v5

      # 5. ???
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload the entire repository
          path: '.'

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4